---
import Layout from '../layouts/Layout.astro';
---
<Layout>
	<main class="engine-main">
		<h1 class="title">Engine Playground</h1>
		<p id="status" class="status">Preparing...</p>
		<div class="panes">
			<section class="editor-pane">
				<label for="editor" class="label">Code</label>
				<div id="editor" class="code-editor" aria-label="Code editor" role="code"></div>
				<div class="buttons">
					<button id="run" disabled class="btn btn-run">Run</button>
					<button id="clear" class="btn btn-clear">Clear</button>
				</div>
			</section>
			<section class="result-pane">
				<div>
					<h2 class="subheading">Result</h2>
					<pre id="output" class="output"></pre>
				</div>
				<div>
					<h2 class="subheading">Console</h2>
					<pre id="console" class="console"></pre>
				</div>
			</section>
		</div>
		<p class="footer-note">Loaded engine</p>
	</main>
	<script type="module">
	(async () => {
		const statusEl = document.getElementById('status');
		const runBtn = document.getElementById('run');
		const clearBtn = document.getElementById('clear');
		const outputEl = document.getElementById('output');
		const consoleEl = document.getElementById('console');
		const editorEl = document.getElementById('editor');

		const defaultCode = `// Try a few things:\nconsole.log("Hello, world!");\n\n// Pretty-printing objects\nconsole.log({ a: 1, b: [2,3], nested: { ok: true }});\n\n// Returned value is shown under Result\n1 + 2 + 3\n`;

		function setEditorDynamicHeight() {
			const h = Math.max(500, window.innerHeight - 230);
			editorEl.style.height = h + 'px';
		}
		window.addEventListener('resize', () => {
			setEditorDynamicHeight();
			if (window.monaco && window._engineEditor) window._engineEditor.layout();
		});
		setEditorDynamicHeight();

		function loadMonaco() {
			return new Promise((resolve, reject) => {
				if (window.monaco) return resolve(window.monaco);
				const loader = document.createElement('script');
				loader.src = 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs/loader.min.js';
				loader.onload = () => {
					window.require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs' }});
					window.require(['vs/editor/editor.main'], () => resolve(window.monaco));
				};
				loader.onerror = reject;
				document.head.appendChild(loader);
			});
		}

		function cssVar(name) {
			return getComputedStyle(document.documentElement).getPropertyValue(name).trim();
		}
		function toHex(c) {
			if (!c) return '#000000';
			c = c.trim();
			if (c.startsWith('#')) {
				if (c.length === 4) { // #rgb
					return '#' + [...c.slice(1)].map(ch => ch + ch).join('');
				}
				if (c.length === 7) return c;
				if (c.length === 9) return c.slice(0,7);
			}
			const m = c.match(/rgba?\(([^)]+)\)/i);
			if (m) {
				let [r,g,b] = m[1].split(',').map(x => parseFloat(x));
				if (r>255||g>255||b>255) return '#000000';
				const to2 = n => n.toString(16).padStart(2,'0');
				return '#' + to2(r) + to2(g) + to2(b);
			}
			return '#000000';
		}
		function withAlpha(hex, alpha) {
			hex = toHex(hex);
			const a = Math.round(Math.min(1, Math.max(0, alpha)) * 255).toString(16).padStart(2,'0');
			return hex + a;
		}
		function parseColor(col) {
			if (!col) return { r:0, g:0, b:0, a:1 };
			col = col.trim();
			if (col.startsWith('#')) {
				let hex = col.slice(1);
				if (hex.length === 3) hex = hex.split('').map(c=>c+c).join('');
				if (hex.length === 6) return { r:parseInt(hex.slice(0,2),16), g:parseInt(hex.slice(2,4),16), b:parseInt(hex.slice(4,6),16), a:1 };
				if (hex.length === 8) return { r:parseInt(hex.slice(0,2),16), g:parseInt(hex.slice(2,4),16), b:parseInt(hex.slice(4,6),16), a:parseInt(hex.slice(6,8),16)/255 };
			}
			const m = col.match(/rgba?\(([^)]+)\)/i);
			if (m) {
				const parts = m[1].split(',').map(p=>p.trim());
				const r = parseFloat(parts[0]);
				const g = parseFloat(parts[1]);
				const b = parseFloat(parts[2]);
				const a = parts[3] !== undefined ? parseFloat(parts[3]) : 1;
				return { r,g,b,a:isNaN(a)?1:a };
			}
			return { r:0,g:0,b:0,a:1 };
		}
		function blend(over, under) {
			const a = over.a + under.a * (1 - over.a);
			if (a === 0) return { r:0,g:0,b:0,a:0 };
			return {
				r: Math.round((over.r * over.a + under.r * under.a * (1 - over.a)) / a),
				g: Math.round((over.g * over.a + under.g * under.a * (1 - over.a)) / a),
				b: Math.round((over.b * over.a + under.b * under.a * (1 - over.a)) / a),
				a
			};
		}
		function toHexOpaque(c) {
			const to2 = n=>n.toString(16).padStart(2,'0');
			return '#' + to2(c.r) + to2(c.g) + to2(c.b);
		}
		function defineSiteTheme(monaco, container) {
			const containerBgRaw = getComputedStyle(container).backgroundColor || cssVar('--card-bg') || 'transparent';
			const baseStartRaw = cssVar('--bg-start') || '#0b1220';
			const containerCol = parseColor(containerBgRaw);
			const baseCol = parseColor(baseStartRaw);
			let finalBgCol = containerCol.a < 1 ? blend(containerCol, baseCol) : containerCol;
			const bg = toHexOpaque(finalBgCol);

			const border = toHex(cssVar('--card-border')) || '#555555';
			const text = toHex(cssVar('--text-primary')) || (window.matchMedia('(prefers-color-scheme: dark)').matches ? '#d4d4d4' : '#1e1e1e');
			const accent = toHex(cssVar('--accent')) || '#22d3ee';
			const base = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'vs-dark' : 'vs';
			monaco.editor.defineTheme('site-theme', {
				base,
				inherit: true,
				rules: [
					{ token: 'comment', foreground: '6a9955', fontStyle: 'italic' },
					{ token: 'string', foreground: 'ce9178' },
					{ token: 'number', foreground: 'b5cea8' },
					{ token: 'keyword', foreground: 'c586c0' },
					{ token: 'identifier', foreground: text.replace('#','') },
				],
				colors: {
					'editor.background': bg,
					'editorGutter.background': bg,
					'editor.foreground': text,
					'editor.lineHighlightBackground': withAlpha(accent, 0.07),
					'editor.lineHighlightBorder': withAlpha(accent, 0.18),
					'editorCursor.foreground': accent,
					'editor.selectionBackground': withAlpha(accent, 0.28),
					'editor.inactiveSelectionBackground': withAlpha(accent, 0.18),
					'editorWhitespace.foreground': withAlpha(text, 0.18),
					'editorIndentGuide.background': withAlpha(border, 0.45),
					'editorIndentGuide.activeBackground': accent,
					'editorLineNumber.foreground': withAlpha(text, 0.42),
					'editorLineNumber.activeForeground': accent,
					'scrollbarSlider.background': withAlpha(border, 0.4),
					'scrollbarSlider.hoverBackground': withAlpha(border, 0.55),
					'scrollbarSlider.activeBackground': withAlpha(accent, 0.55),
				}
			});
		}
		function applySiteTheme(monaco) { defineSiteTheme(monaco, editorEl); monaco.editor.setTheme('site-theme'); }

		statusEl.textContent = 'Loading editor & engine...';
		try {
			const [monacoMod, engineMod] = await Promise.all([
				loadMonaco(),
				import('https://esm.sh/jsr/@yavashark/engine-git')
			]);

			const { default: init, Engine, set_console_log } = engineMod;
			if (init) { try { await init(); } catch (_) { /* ignore */ } }

			applySiteTheme(monacoMod);

			const editor = monacoMod.editor.create(editorEl, {
				value: defaultCode,
				language: 'javascript',
				automaticLayout: true,
				minimap: { enabled: false },
				fontSize: 14,
				theme: 'site-theme'
			});
			window._engineEditor = editor;

			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => applySiteTheme(monacoMod));
			new MutationObserver(() => applySiteTheme(monacoMod)).observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme','class'] });

			const eng = new Engine();
			const logs = [];
			if (set_console_log) {
				set_console_log((...args) => {
					const line = args.map(a => {
						try { return typeof a === 'object' ? JSON.stringify(a) : String(a); } catch { return String(a); }
					}).join(' ');
					logs.push(line);
					consoleEl.textContent = logs.join('\n');
				});
			}

			statusEl.textContent = 'Ready';
			runBtn.disabled = false;

			runBtn.addEventListener('click', async () => {
				runBtn.disabled = true;
				logs.length = 0;
				consoleEl.textContent = '';
				outputEl.textContent = '';
				try {
					const code = editor.getValue();
					const result = eng.eval(code);
					if (result !== undefined) outputEl.textContent = result;
					await eng.run_event_loop().catch(() => {});
				} catch (e) {
					outputEl.textContent = 'Error: ' + (e?.message || e);
				}
				runBtn.disabled = false;
			});

			clearBtn.addEventListener('click', () => {
				editor.setValue('');
				outputEl.textContent = '';
				logs.length = 0;
				consoleEl.textContent = '';
			});

		} catch (e) {
			statusEl.textContent = 'Failed to load engine/editor: ' + (e?.message || e);
			console.error(e);
		}
	})();
	</script>
	<style>
	.engine-main { max-width:100%; margin:0 auto; padding:1rem 1.25rem 2rem; font-family:inherit; min-height:100vh; box-sizing:border-box; display:flex; flex-direction:column; }
	.title { margin-top:0; }
	.status { font-size:0.9rem; color:var(--text-muted); }
	.panes { display:flex; gap:1rem; flex:1; flex-wrap:wrap; align-items:stretch; min-height:0; }
	.editor-pane { flex:2 1 60%; min-width:320px; display:flex; flex-direction:column; gap:.5rem; min-height:0; }
	.label { font-weight:600; }
	.code-editor { background:var(--card-bg); border:1px solid var(--card-border); border-radius:8px; }
	@media (min-width: 900px) { .code-editor { min-height:70vh; } }
	.buttons { display:flex; gap:.5rem; align-items:center; }
	.btn { font-weight:500; border-radius:6px; cursor:pointer; padding:.55rem 1rem; }
	.btn-run { background:var(--accent); color:#041318; font-weight:600; border:none; }
	.btn-clear { background:var(--card-bg); color:var(--text-primary); border:1px solid var(--card-border); }
	.result-pane { flex:1 1 35%; min-width:300px; display:flex; flex-direction:column; gap:1rem; min-height:0; }
	.subheading { margin:.25rem 0 .5rem; font-size:1.1rem; }
	.output, .console { margin:0; background:var(--card-bg); border:1px solid var(--card-border); padding:.75rem; white-space:pre-wrap; word-break:break-word; border-radius:8px; overflow:auto; }
	.output { min-height:3rem; }
	.console { min-height:8rem; }
	.footer-note { font-size:.75rem; color:var(--text-muted); margin-top:1rem; }
	.btn:disabled { opacity:.6; cursor:default; }
	.panes { align-items:flex-start; }
	</style>
</Layout>
