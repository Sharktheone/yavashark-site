---
---

<canvas id="testHistoryChart"></canvas>

<style>
  canvas#testHistoryChart {
    display: block;
    width: 100% !important;
    height: 420px !important;
  }

  @media (max-width: 640px) {
    canvas#testHistoryChart { height: 340px !important; }
  }
</style>

<script>
  import { Chart } from 'chart.js/auto';
  import 'chartjs-adapter-date-fns';
  import { summaryKeys, summaryLabels, summaryColors } from './summary.ts';

  const endpoint = "https://raw.githubusercontent.com/Sharktheone/yavashark-data/refs/heads/main/history.json";

  function cssVar(name) {
    return getComputedStyle(document.documentElement).getPropertyValue(name).trim() || undefined;
  }

  function toRGBA(rgb, alpha) {
    if (!rgb) return `rgba(255,255,255,${alpha})`;
    if (rgb.startsWith('rgba')) return rgb.replace(/rgba\(([^)]+),\s*[^)]+\)/, `rgba($1, ${alpha})`);
    if (rgb.startsWith('rgb(')) return rgb.replace('rgb(', 'rgba(').replace(')', `, ${alpha})`);
    return rgb;
  }

  async function fetchTestHistory() {
    try {
      const response = await fetch(endpoint);
      if (!response.ok) {
        console.error(`Failed to fetch test history: ${response.status} ${response.statusText}`);
        return null;
      }
      return await response.json();
    } catch (e) {
      console.error('Failed to fetch test history:', e);
      return null;
    }
  }

  const stored = localStorage.getItem('stackMode');
  const initialStacked = stored === null ? false : stored === 'true';

  let chart;

  fetchTestHistory().then(testHistory => {
    if (!testHistory) return;

    const ctx = document.getElementById('testHistoryChart')?.getContext('2d');
    if (!ctx) return;

    const text = cssVar('--text-primary') || '#e2e8f0';
    const muted = cssVar('--text-muted') || '#94a3b8';
    const grid = 'rgba(148, 163, 184, 0.25)';

    // Define which datasets should be visible by default
    const defaultVisible = ['passed', 'failed', 'not_implemented'];

    const datasets = summaryKeys.map((key, index) => {
      const isVisible = defaultVisible.includes(key);
      return {
        label: summaryLabels[key],
        data: testHistory.runs.map(run => ({ y: run[key], x: run.time * 1000 })),
        borderColor: summaryColors[key],
        backgroundColor: toRGBA(summaryColors[key], initialStacked ? 0.18 : 0.25),
        pointRadius: 1.5,
        tension: 0.22,
        fill: initialStacked ? (index === 0 ? 'origin' : '-1') : false,
        stack: initialStacked ? 'total' : undefined,
        hidden: !isVisible, // Hide datasets that aren't in defaultVisible
      };
    });

    console.log(datasets)

    chart = new Chart(ctx, {
      type: 'line',
      data: { datasets },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: { mode: 'nearest', intersect: false },
        plugins: {
          legend: { position: 'top', labels: { color: text } },
          title: {
            display: true,
            text: 'Test History Results',
            color: text,
            padding: { top: 6, bottom: 8 },
            font: { size: 16, weight: '600' }
          },
          tooltip: {
            padding: 10,
            titleColor: text,
            bodyColor: text,
            backgroundColor: 'rgba(2, 6, 23, 0.9)',
            borderColor: grid,
            borderWidth: 1
          }
        },
        scales: {
          x: { type: 'time', grid: { color: grid }, ticks: { color: muted } },
          y: { grid: { color: grid }, ticks: { color: muted }, stacked: initialStacked }
        },
        layout: { padding: { left: 4, right: 8, top: 4, bottom: 4 } },
        animation: { duration: 450 },
        devicePixelRatio: window.devicePixelRatio || 1
      }
    });
  });

  function applyStackMode(stacked) {
    if (!chart) return;
    chart.options.scales.y.stacked = stacked;
    chart.data.datasets.forEach((ds, i) => {
      ds.fill = stacked ? (i === 0 ? 'origin' : '-1') : false;
      if (stacked) { ds.stack = 'total'; ds.backgroundColor = toRGBA(ds.borderColor, 0.18); }
      else { delete ds.stack; ds.backgroundColor = toRGBA(ds.borderColor, 0.25); }
    });
    chart.update();
  }

  window.addEventListener('stack-mode-change', (e) => {
    applyStackMode(e.detail === true);
  });
</script>
