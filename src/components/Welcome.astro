---
---

<div id="container">
    <main>
        <h1>
            Yavashark test262 results
        </h1>
        <div class="controls">
            <label class="toggle">
                <input type="checkbox" id="stackToggle" />
                <span class="slider" aria-hidden="true"></span>
                <span class="label">Stack datasets</span>
            </label>
        </div>
        <section id="diagram">
            <div class="card">
                <canvas id="testHistoryChart"></canvas>
            </div>
        </section>
    </main>
</div>

<style>
    #container {
        height: 100vh;
        display: grid;
        place-items: center;
        padding: 2rem 1rem;
        color: var(--text-primary);
    }

    main {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        text-align: center;
    }

    h1 {
        font-size: clamp(2rem, 4vw + 1rem, 3.25rem);
        line-height: 1.1;
        margin: 0;
        background: linear-gradient(90deg, var(--accent), var(--accent-2));
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        letter-spacing: 0.2px;
    }

    .subtitle {
        margin: 0.25rem 0 0.75rem;
        color: var(--text-muted);
        font-size: 0.95rem;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.5rem;
    }

    .toggle {
        display: inline-flex;
        align-items: center;
        gap: 0.6rem;
        cursor: pointer;
        user-select: none;
        color: var(--text-muted);
        font-size: 0.95rem;
    }
    .toggle input { display: none; }
    .toggle .slider {
        width: 44px; height: 26px; border-radius: 999px; position: relative;
        background: rgba(148, 163, 184, 0.35); border: 1px solid var(--card-border);
        box-shadow: inset 0 0 0 1px rgba(255,255,255,0.02);
        transition: background 180ms ease;
    }
    .toggle .slider::after {
        content: ""; position: absolute; top: 2px; left: 2px; width: 21px; height: 21px;
        background: #0ea5e9; border-radius: 50%; transition: transform 180ms ease, background 180ms ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.35);
    }
    .toggle input:checked + .slider { background: rgba(34, 211, 238, 0.35); }
    .toggle input:checked + .slider::after { transform: translateX(18px); background: #22d3ee; }

    .toggle .label { color: var(--text-muted); }

    #diagram {
        width: 100%;
        display: flex;
        justify-content: center;
        padding: 0.25rem;
    }

    .card {
        width: min(1100px, 92vw);
        padding: 1rem;
        border-radius: 16px;
        border: 1px solid var(--card-border);
        background: var(--card-bg);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35), inset 0 1px 0 rgba(255,255,255,0.04);
        overflow: hidden;
        backdrop-filter: blur(8px);
    }

    /* Fallback if backdrop-filter unsupported */
    @supports not ((backdrop-filter: blur(8px))) {
        .card { background: rgba(17, 24, 39, 0.5); }
    }

    canvas#testHistoryChart {
        display: block;
        width: 100% !important;
        height: 420px !important;
    }

    @media (max-width: 640px) {
        canvas#testHistoryChart { height: 340px !important; }
    }
</style>

<script>
    import { Chart } from 'chart.js/auto';
    import 'chartjs-adapter-date-fns';

    const endpoint = "https://raw.githubusercontent.com/Sharktheone/yavashark-data/refs/heads/main/history.json";

    function cssVar(name) {
        return getComputedStyle(document.documentElement).getPropertyValue(name).trim() || undefined;
    }

    function toRGBA(rgb, alpha) {
        // converts 'rgb(r, g, b)' to 'rgba(r, g, b, a)'
        if (!rgb) return `rgba(255,255,255,${alpha})`;
        if (rgb.startsWith('rgba')) return rgb.replace(/rgba\(([^)]+),\s*[^)]+\)/, `rgba($1, ${alpha})`);
        if (rgb.startsWith('rgb(')) return rgb.replace('rgb(', 'rgba(').replace(')', `, ${alpha})`);
        return rgb; // fallback
    }

    async function fetchTestHistory() {
        try {
            const response = await fetch(endpoint);
            if (!response.ok) {
                console.error(`Failed to fetch test history: ${response.status} ${response.statusText}`);
                return null;
            }
            return await response.json();
        } catch (e) {
            console.error('Failed to fetch test history:', e);
            return null;
        }
    }

    const stackToggle = document.getElementById('stackToggle');
    const stored = localStorage.getItem('stackMode');
    const initialStacked = stored === null ? false : stored === 'true';
    (stackToggle).checked = initialStacked;

    let chart;

    fetchTestHistory().then(testHistory => {
        if (!testHistory) return;

        const ctx = document.getElementById('testHistoryChart')!.getContext('2d');

        const text = cssVar('--text-primary') || '#e2e8f0';
        const muted = cssVar('--text-muted') || '#94a3b8';
        const grid = 'rgba(148, 163, 184, 0.25)';

        const datasets = [
            {
                label: 'Passed',
                data: testHistory.runs.map(run => ({ y: run.passed, x: run.time * 1000 })),
                borderColor: 'rgb(34, 197, 94)',
                backgroundColor: toRGBA('rgb(34, 197, 94)', initialStacked ? 0.18 : 0.25),
                pointRadius: 1.5,
                tension: 0.22,
                fill: initialStacked ? 'origin' : false,
                stack: initialStacked ? 'total' : undefined,
            },
            {
                label: 'Failed',
                data: testHistory.runs.map(run => ({ y: run.failed, x: run.time * 1000 })),
                borderColor: 'rgb(239, 68, 68)',
                backgroundColor: toRGBA('rgb(239, 68, 68)', initialStacked ? 0.18 : 0.25),
                pointRadius: 1.5,
                tension: 0.22,
                fill: initialStacked ? '-1' : false,
                stack: initialStacked ? 'total' : undefined,
            },
            {
                label: 'Not Implemented',
                data: testHistory.runs.map(run => ({ y: run.not_implemented, x: run.time * 1000 })),
                borderColor: 'rgb(234, 179, 8)',
                backgroundColor: toRGBA('rgb(234, 179, 8)', initialStacked ? 0.18 : 0.25),
                pointRadius: 1.5,
                tension: 0.22,
                fill: initialStacked ? '-1' : false,
                stack: initialStacked ? 'total' : undefined,
            },
        ];

        chart = new Chart(ctx, {
            type: 'line',
            data: { datasets },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: { mode: 'nearest', intersect: false },
                plugins: {
                    legend: { position: 'top', labels: { color: text } },
                    title: {
                        display: true,
                        text: 'Test History Results',
                        color: text,
                        padding: { top: 6, bottom: 8 },
                        font: { size: 16, weight: '600' }
                    },
                    tooltip: {
                        padding: 10,
                        titleColor: text,
                        bodyColor: text,
                        backgroundColor: 'rgba(2, 6, 23, 0.9)',
                        borderColor: grid,
                        borderWidth: 1
                    }
                },
                scales: {
                    x: { type: 'time', grid: { color: grid }, ticks: { color: muted } },
                    y: { grid: { color: grid }, ticks: { color: muted }, stacked: initialStacked }
                },
                layout: { padding: { left: 4, right: 8, top: 4, bottom: 4 } },
                animation: { duration: 450 },
                devicePixelRatio: window.devicePixelRatio || 1
            }
        });
    });

    function applyStackMode(stacked) {
        if (!chart) return;
        chart.options.scales.y.stacked = stacked;
        chart.data.datasets.forEach((ds, i) => {
            ds.fill = stacked ? (i === 0 ? 'origin' : '-1') : false;
            if (stacked) { ds.stack = 'total'; ds.backgroundColor = toRGBA(ds.borderColor, 0.18); }
            else { delete ds.stack; ds.backgroundColor = toRGBA(ds.borderColor, 0.25); }
        });
        chart.update();
    }

    stackToggle.addEventListener('change', (e) => {
        const checked = e.currentTarget.checked;
        localStorage.setItem('stackMode', String(checked));
        applyStackMode(checked);
    });
</script>
