---
import astroLogo from '../assets/astro.svg'
import background from '../assets/background.svg'
---

<div id="container">
    <main>
        <h1>
            Yavashark test262 results
        </h1>
        <section id="diagram">
            <canvas id="testHistoryChart"></canvas>
        </section>
    </main>
</div>

<style>
    #container {
        font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
        background-color: #030712FF;
        height: 100%;
        color: white;
    }

    main {
        height: 100%;
        justify-content: center;
        align-items: center;
        display: flex;
        flex-direction: column;
    }

    section {
        padding: 1rem;
        max-height: 80vh;
        width: 100%;
        box-sizing: border-box;
        display: flex;
        justify-content: center;

    }

    h1 {
        font-size: 3rem;
        margin: 0 auto;
        width: max-content;
    }
</style>


<script>
    import { Chart } from 'chart.js/auto';
    import 'chartjs-adapter-date-fns';

    const endpoint = "https://raw.githubusercontent.com/Sharktheone/yavashark-data/refs/heads/main/history.json"

    async function fetchTestHistory() {
        const response = await fetch(endpoint)
        if (!response.ok) {
            console.error(`Failed to fetch test history: ${response.status} ${response.statusText}`)
            return
        }
        return response.json()
    }

    fetchTestHistory().then(testHistory => {
        if (!testHistory) return

        const ctx = document.getElementById('testHistoryChart')!.getContext('2d')
        new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: 'Passed',
                        data: testHistory.runs.map(run => ({y: run.passed, x: run.timestamp})),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: false,
                    },
                    {
                        label: 'Failed',
                        data: testHistory.runs.map(run => ({y: run.failed, x: run.timestamp})),
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1,
                        fill: false,
                    },
                    {
                        label: 'Not Implemented',
                        data: testHistory.runs.map(run => ({y: run.not_implemented, x: run.timestamp})),
                        borderColor: 'rgb(255, 205, 86)',
                        tension: 0.1,
                        fill: false,
                    },
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'time',
                    },
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Test History Results'
                    }
                },
            }
        })
    })
</script>
