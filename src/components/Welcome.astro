---
import astroLogo from '../assets/astro.svg'
import background from '../assets/background.svg'
---

<div id="container">
    <main>
        <h1>
            Yavashark test262 results
        </h1>
        <section id="diagram">
            <canvas id="testHistoryChart"></canvas>
        </section>
    </main>
</div>

<style>
    #container {
        font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
        background-color: #030712FF;
        height: 100%;
        color: white;
    }

    main {
        height: 100%;
        justify-content: center;
    }

    h1 {
        font-size: 3rem;
        margin: 0 auto;
        width: max-content;
    }

    #links {
        display: flex;
        gap: 16px;
    }

    #links a {
        display: flex;
        align-items: center;
        padding: 10px 12px;
        color: #111827;
        text-decoration: none;
        transition: color 0.2s;
    }

    #links a:hover {
        color: rgb(78, 80, 86);
    }

    #links a svg {
        height: 1em;
        margin-left: 8px;
    }

    #links a.button {
        color: white;
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
        box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.12),
        inset 0 -2px 0 rgba(0, 0, 0, 0.24);
        border-radius: 10px;
    }

    #links a.button:hover {
        color: rgb(230, 230, 230);
        box-shadow: none;
    }

    pre {
        font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas,
        'DejaVu Sans Mono', monospace;
        font-weight: normal;
        background: linear-gradient(14deg, #d83333 0%, #f041ff 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin: 0;
    }

    h2 {
        margin: 0 0 1em;
        font-weight: normal;
        color: #111827;
        font-size: 20px;
    }

    p {
        color: #4b5563;
        font-size: 16px;
        line-height: 24px;
        letter-spacing: -0.006em;
        margin: 0;
    }

    code {
        display: inline-block;
        background: linear-gradient(66.77deg, #f3cddd 0%, #f5cee7 100%) padding-box,
        linear-gradient(155deg, #d83333 0%, #f041ff 18%, #f5cee7 45%) border-box;
        border-radius: 8px;
        border: 1px solid transparent;
        padding: 6px 8px;
    }

    .box {
        padding: 16px;
        background: rgba(255, 255, 255, 1);
        border-radius: 16px;
        border: 1px solid white;
    }

    #news {
        position: absolute;
        bottom: 16px;
        right: 16px;
        max-width: 300px;
        text-decoration: none;
        transition: background 0.2s;
        backdrop-filter: blur(50px);
    }

    #news:hover {
        background: rgba(255, 255, 255, 0.55);
    }

    @media screen and (max-height: 368px) {
        #news {
            display: none;
        }
    }

    @media screen and (max-width: 768px) {
        #container {
            display: flex;
            flex-direction: column;
        }

        #hero {
            display: block;
            padding-top: 10%;
        }

        #links {
            flex-wrap: wrap;
        }

        #links a.button {
            padding: 14px 18px;
        }

        #news {
            right: 16px;
            left: 16px;
            bottom: 2.5rem;
            max-width: 100%;
        }

        h1 {
            line-height: 1.5;
        }
    }
</style>


<script>
    import { Chart } from 'chart.js/auto';
    import 'chartjs-adapter-date-fns';

    const endpoint = "https://raw.githubusercontent.com/Sharktheone/yavashark-data/refs/heads/main/history.json"

    async function fetchTestHistory() {
        const response = await fetch(endpoint)
        if (!response.ok) {
            console.error(`Failed to fetch test history: ${response.status} ${response.statusText}`)
            return
        }
        return response.json()
    }

    function formatTime(timestamp: string) {
        const date = new Date(timestamp);
        return date.getTime()

    }

    fetchTestHistory().then(testHistory => {
        if (!testHistory) return

        const ctx = document.getElementById('testHistoryChart')!.getContext('2d')
        new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: 'Passed',
                        data: testHistory.runs.map(run => ({y: run.passed, x: formatTime(run.timestamp)})),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: false,
                    },
                    {
                        label: 'Failed',
                        data: testHistory.runs.map(run => ({y: run.failed, x: formatTime(run.timestamp)})),
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1,
                        fill: false,
                    },
                    {
                        label: 'Skipped',
                        data: {y: testHistory.runs.map(run => run.skipped), x: testHistory.runs.map(run => formatTime(run.timestamp))},
                        borderColor: 'rgb(255, 205, 86)',
                        tension: 0.1,
                        fill: false,
                    },
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'time',
                    },
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Test History Results'
                    }
                }
            }
        })
    })
</script>
